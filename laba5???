import numpy as np
import numpy.linalg as lng


class PowerFunction:
    def __init__(self, x, y):
        self.a = 0
        self.b = 0
        self.c = 0
        self.d = 0
        self.x = x
        self.y = y

    def approximate(self, n=2):
        sums_x = []
        sums_yx = []
        matrix = []
        for i in range(2 * n + 1):
            summ = 0
            for count in self.x:
                summ += count ** i
            sums_x.append(summ)
        for j in range(n + 1):
            sub = []
            for i in range(j, j + n + 1):
                sub.append(sums_x[i])
            matrix.append(sub)
        for i in range(n + 1):
            summ = 0
            for j in range(len(self.x)):
                summ += self.y[j] * self.x[j] ** i
            sums_yx.append(summ)
        return lng.solve(matrix, sums_yx)

    def __str__(self, n = 2):
        k = self.approximate(n)
        string = str(k[0])
        for i in range(1, len(k)):
            string += " + " + f"{k[i]} * x**{i}"
        return string


x = [1, 1.2, 1.4, 1.7, 2, 2.4, 2.8, 3.2, 3.6, 4]
y = [1100, 920, 850, 830, 800, 785, 770, 760, 750, 745]
x1 = [10, 30, 60, 80, 100, 120, 140, 160, 180, 200]
y1 = [10, 90.2, 359, 638, 999.9, 1438, 1961, 2562, 3240, 4001]
sl = PowerFunction(x, y)
print(sl)
