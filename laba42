import time

import numpy as np
from PyQt5.QtWidgets import (QApplication, QLabel, QLineEdit, QMainWindow, QPushButton, QFormLayout, QWidget, QComboBox, QMessageBox)
from numpy import *
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.setWindowTitle('График')
        self.fig = plt.figure()
        self.canvas = FigureCanvas(self.fig)

        cental_widget = QWidget()
        layout = QFormLayout()
        cental_widget.setLayout(layout)

        layout.addWidget(self.canvas)

        self.setCentralWidget(cental_widget)

        self.error_message = QMessageBox()
        self.error_message.setText("Функция введена неверно!")
        self.error_message.setWindowTitle('Ошибка!')
        self.error_message.setIcon(QMessageBox.Critical)

        self.range_label = QLabel('Диапазон:')
        self.range_start_input = QLineEdit('-10')
        self.range_end_input = QLineEdit('10')

        self.bisection_button = QPushButton('Метод деления интервалов')
        self.bisection_button.clicked.connect(self.bisection)

        self.plot_button = QPushButton('Очистить график')
        self.plot_button.clicked.connect(self.clear_plot)

        self.function_widget = QComboBox()
        self.function_widget.addItems(['2*x','x + 3', '2*x - 5', 'x**3 - 5', ''])

        layout.addWidget(self.range_label)
        layout.addWidget(self.range_start_input)
        layout.addWidget(self.range_end_input)
        layout.addWidget(self.bisection_button)
        layout.addWidget(self.plot_button)
        layout.addWidget(self.function_widget)



    def vectors(self):
        expression = self.function_widget.currentText()

        try:
            range_start = float(self.range_start_input.text())
            range_end = float(self.range_end_input.text())
            points = 50
        except ValueError:
            range_start = 0
            range_end = 1
            points = 50

        functions = {}
        x = np.linspace(range_start, range_end, points)
        try:
            exec(f'def f(x): return {expression}', functions)
            function = functions['f']
            y = [function(value) for value in x]
            return x, y

        except NameError:
            self.error_message.show()
            return 0
        except SyntaxError:
            self.error_message.show()
            return 0

    def clear_plot(self):
        for ax in self.fig.axes:
            ax.clear()
        plt.grid(True)
        self.canvas.draw()

    def bisection(self):
        n = 1000
        while n != 0:
            a, b = float(self.range_start_input.text()), float(self.range_end_input.text())
            EPS = 10**-3
            n -= 1
            expression = self.function_widget.currentText()
            functions = {}
            exec(f'def ff(x): return {expression}', functions)
            f = functions['ff']
            c = (a + b) / 2
            x = np.linspace(a, b, 50)
            y = [f(value) for value in x]
            plt.plot(x, y)
            plt.grid(True)
            if f(c) == 0:
                plt.scatter(c, f(c),color='black')
                self.canvas.draw()
                break
            elif f(c) < 0:
                if f(b) > 0:
                    a = c
                elif f(a) > 0:
                    b = c
            elif f(c) > 0:
                if f(b) < 0:
                    a = c
                elif f(a) < 0:
                    b = c
            elif f(c) < EPS:
                plt.scatter(c, f(c),color='black')
                self.canvas.draw()
                break
            self.range_start_input.setText(str(a))
            self.range_end_input.setText(str(b))
            self.canvas.draw()



app = QApplication([])
main_window = MainWindow()
main_window.show()
app.exec()import time

import numpy as np
from PyQt5.QtWidgets import (QApplication, QLabel, QLineEdit, QMainWindow, QPushButton, QFormLayout, QWidget, QComboBox, QMessageBox)
from numpy import *
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.setWindowTitle('График')
        self.fig = plt.figure()
        self.canvas = FigureCanvas(self.fig)

        cental_widget = QWidget()
        layout = QFormLayout()
        cental_widget.setLayout(layout)

        layout.addWidget(self.canvas)

        self.setCentralWidget(cental_widget)

        self.error_message = QMessageBox()
        self.error_message.setText("Функция введена неверно!")
        self.error_message.setWindowTitle('Ошибка!')
        self.error_message.setIcon(QMessageBox.Critical)

        self.range_label = QLabel('Диапазон:')
        self.range_start_input = QLineEdit('-10')
        self.range_end_input = QLineEdit('10')

        self.bisection_button = QPushButton('Метод деления интервалов')
        self.bisection_button.clicked.connect(self.bisection)

        self.plot_button = QPushButton('Очистить график')
        self.plot_button.clicked.connect(self.clear_plot)

        self.function_widget = QComboBox()
        self.function_widget.addItems(['2*x','x + 3', '2*x - 5', 'x**3 - 5', ''])

        layout.addWidget(self.range_label)
        layout.addWidget(self.range_start_input)
        layout.addWidget(self.range_end_input)
        layout.addWidget(self.bisection_button)
        layout.addWidget(self.plot_button)
        layout.addWidget(self.function_widget)



    def vectors(self):
        expression = self.function_widget.currentText()

        try:
            range_start = float(self.range_start_input.text())
            range_end = float(self.range_end_input.text())
            points = 50
        except ValueError:
            range_start = 0
            range_end = 1
            points = 50

        functions = {}
        x = np.linspace(range_start, range_end, points)
        try:
            exec(f'def f(x): return {expression}', functions)
            function = functions['f']
            y = [function(value) for value in x]
            return x, y

        except NameError:
            self.error_message.show()
            return 0
        except SyntaxError:
            self.error_message.show()
            return 0

    def clear_plot(self):
        for ax in self.fig.axes:
            ax.clear()
        plt.grid(True)
        self.canvas.draw()

    def bisection(self):
        n = 1000
        while n != 0:
            a, b = float(self.range_start_input.text()), float(self.range_end_input.text())
            EPS = 10**-3
            n -= 1
            expression = self.function_widget.currentText()
            functions = {}
            exec(f'def ff(x): return {expression}', functions)
            f = functions['ff']
            c = (a + b) / 2
            x = np.linspace(a, b, 50)
            y = [f(value) for value in x]
            plt.plot(x, y)
            plt.grid(True)
            if f(c) == 0:
                plt.scatter(c, f(c),color='black')
                self.canvas.draw()
                break
            elif f(c) < 0:
                if f(b) > 0:
                    a = c
                elif f(a) > 0:
                    b = c
            elif f(c) > 0:
                if f(b) < 0:
                    a = c
                elif f(a) < 0:
                    b = c
            elif f(c) < EPS:
                plt.scatter(c, f(c),color='black')
                self.canvas.draw()
                break
            self.range_start_input.setText(str(a))
            self.range_end_input.setText(str(b))
            self.canvas.draw()



app = QApplication([])
main_window = MainWindow()
main_window.show()
app.exec()
