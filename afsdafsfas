import numpy as np
import numpy.linalg as lng


class Function:
    def __init__(self, n=3, k=None):
        if k is None:
            k = []
        self.k = k
        self.n = n
        self.x = []
        self.y = []

    def __del__(self):
        del self.k
        del self.n
        del self.x
        del self.y

    def __repr__(self):
        string = str(self.k[0])
        for element in self.k[1:]:
            string += f', {element}'
        return self.n, string

    def __len__(self):
        return self.n + 1

    def residual(self):
        get_array = [self.__call__(value) for value in self.x]
        residual_array = []
        for i in range(len(self.y)):
            residual_array.append((get_array[i] - self.y[i])**2)
        return max(residual_array)


class LogFunction(Function):
    count = 0

    def __init__(self, n=3, k=None):
        super().__init__(n, k)
        LogFunction.count += 1

    def approximate(self, x, y):
        self.x = x
        self.y = y
        sum_log_x = []
        sums_ylog_x = []
        matrix = []
        for i in range(2 * self.n + 1):
            summ = 0
            for count in x:
                summ += np.log(count)**i
            sum_log_x.append(summ)
        for j in range(self.n + 1):
            sub = []
            for i in range(j, j + self.n + 1):
                sub.append(sum_log_x[i])
            matrix.append(sub)

        for i in range(self.n + 1):
            summ = 0
            for j in range(len(x)):
                summ += y[j] * np.log(x[j])**i
            sums_ylog_x.append(summ)
        print(matrix)
        self.k = lng.solve(matrix, sums_ylog_x)

    def __str__(self):
        EPS = 10**-4
        string = str(round(self.k[0], 4)) if self.k[0] > EPS else f"{self.k[0]}"
        for i in range(1, len(self.k)):
            string += " + " if self.k[i] >= 0 else " "
            string += f"{round(self.k[i], 4)} * ln(x)**{i}" if self.k[i] > EPS else f"{round(self.k[i], 10)} * ln(x)**{i}"
        return string

    def __call__(self, x):
        i = 0
        y = 0
        for count in self.k:
            y += count * np.log(x)**i
            i += 1
        return round(y, 5)

    def __len__(self):
        return super().__len__()

    def __del__(self):
        super().__del__()
        LogFunction.count -= 1

    def __repr__(self):
        n, string = super().__repr__()
        return f'LogFunction({n},[{string}])'

    def residual(self):
        return super().residual()


class ExponentialFunction(Function):
    count = 0

    def __init__(self, n=3, k=None):
        super().__init__(n, k)
        ExponentialFunction.count += 1

    def approximate(self, x, y):
        self.x = x
        self.y = y
        sums_x = []
        sums_yx = []
        matrix = []
        for i in range(2 * self.n + 1):
            summ = 0
            for count in x:
                summ += np.e ** (-count * i)
            sums_x.append(summ)
        for j in range(self.n + 1):
            sub = []
            for i in range(j, j + self.n + 1):
                sub.append(sums_x[i])
            matrix.append(sub)
        for i in range(self.n + 1):
            summ = 0
            for j in range(len(x)):
                summ += y[j] * np.e ** (-x[j] * i)
            sums_yx.append(summ)
        self.k = lng.solve(matrix, sums_yx)

    def __str__(self):
        EPS = 1e-4
        string = str(round(self.k[0], 4)) if self.k[0] > EPS else f"{self.k[0]}"
        for i in range(1, len(self.k)):
            string += " + " if self.k[i] >= 0 else " "
            string += f"{round(self.k[i], 4)} * e**(-{i}x)" if self.k[i] > EPS else f"{round(self.k[i], 10)} *  e**(-{i}x)"
        return string

    def __call__(self, x):
        i = 0
        y = 0
        for count in self.k:
            y += count * np.e**(-x * i)
            i += 1
        return round(y, 5)

    def __len__(self):
        return super().__len__()

    def __del__(self):
        super().__del__()
        ExponentialFunction.count -= 1

    def __repr__(self):
        n, string = super().__repr__()
        return f'ExponentialFunction({n}, [{string}])'

    def residual(self):
        return super().residual()
